// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	URLService_CreateURLRecord_FullMethodName  = "/shortener.URLService/CreateURLRecord"
	URLService_CreateURLRecords_FullMethodName = "/shortener.URLService/CreateURLRecords"
	URLService_DeleteURLRecords_FullMethodName = "/shortener.URLService/DeleteURLRecords"
	URLService_GetURLByShort_FullMethodName    = "/shortener.URLService/GetURLByShort"
	URLService_GetURLByUserID_FullMethodName   = "/shortener.URLService/GetURLByUserID"
	URLService_PingContext_FullMethodName      = "/shortener.URLService/PingContext"
	URLService_GetStats_FullMethodName         = "/shortener.URLService/GetStats"
)

// URLServiceClient is the client API for URLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLServiceClient interface {
	// CreateURLRecords creates multiple URL records in batch, based on a list of requests and user ID.
	CreateURLRecord(ctx context.Context, in *CreateURLRecordRequest, opts ...grpc.CallOption) (*CreateURLRecordResponse, error)
	// CreateURLRecords creates multiple URL records in batch, based on a list of requests and user ID.
	CreateURLRecords(ctx context.Context, in *CreateURLRecordBatchRequest, opts ...grpc.CallOption) (*CreateURLRecordBatchResponse, error)
	// DeleteURLRecords deletes multiple URL records in batch.
	DeleteURLRecords(ctx context.Context, in *DeleteURLRecordsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetURLByShort retrieves a URL record by its shortened URL.
	GetURLByShort(ctx context.Context, in *Short, opts ...grpc.CallOption) (*URLRecord, error)
	// GetURLByUserID retrieves all URL records associated with a given user ID.
	GetURLByUserID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ByUserIDResponse, error)
	// PingContext checks the health of the URL service.
	PingContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetStats retrieves stats for all URL records.
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type uRLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLServiceClient(cc grpc.ClientConnInterface) URLServiceClient {
	return &uRLServiceClient{cc}
}

func (c *uRLServiceClient) CreateURLRecord(ctx context.Context, in *CreateURLRecordRequest, opts ...grpc.CallOption) (*CreateURLRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateURLRecordResponse)
	err := c.cc.Invoke(ctx, URLService_CreateURLRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) CreateURLRecords(ctx context.Context, in *CreateURLRecordBatchRequest, opts ...grpc.CallOption) (*CreateURLRecordBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateURLRecordBatchResponse)
	err := c.cc.Invoke(ctx, URLService_CreateURLRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) DeleteURLRecords(ctx context.Context, in *DeleteURLRecordsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, URLService_DeleteURLRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) GetURLByShort(ctx context.Context, in *Short, opts ...grpc.CallOption) (*URLRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(URLRecord)
	err := c.cc.Invoke(ctx, URLService_GetURLByShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) GetURLByUserID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ByUserIDResponse)
	err := c.cc.Invoke(ctx, URLService_GetURLByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) PingContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, URLService_PingContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLServiceClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, URLService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLServiceServer is the server API for URLService service.
// All implementations must embed UnimplementedURLServiceServer
// for forward compatibility.
type URLServiceServer interface {
	// CreateURLRecords creates multiple URL records in batch, based on a list of requests and user ID.
	CreateURLRecord(context.Context, *CreateURLRecordRequest) (*CreateURLRecordResponse, error)
	// CreateURLRecords creates multiple URL records in batch, based on a list of requests and user ID.
	CreateURLRecords(context.Context, *CreateURLRecordBatchRequest) (*CreateURLRecordBatchResponse, error)
	// DeleteURLRecords deletes multiple URL records in batch.
	DeleteURLRecords(context.Context, *DeleteURLRecordsRequest) (*emptypb.Empty, error)
	// GetURLByShort retrieves a URL record by its shortened URL.
	GetURLByShort(context.Context, *Short) (*URLRecord, error)
	// GetURLByUserID retrieves all URL records associated with a given user ID.
	GetURLByUserID(context.Context, *ID) (*ByUserIDResponse, error)
	// PingContext checks the health of the URL service.
	PingContext(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetStats retrieves stats for all URL records.
	GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error)
	mustEmbedUnimplementedURLServiceServer()
}

// UnimplementedURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedURLServiceServer struct{}

func (UnimplementedURLServiceServer) CreateURLRecord(context.Context, *CreateURLRecordRequest) (*CreateURLRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURLRecord not implemented")
}
func (UnimplementedURLServiceServer) CreateURLRecords(context.Context, *CreateURLRecordBatchRequest) (*CreateURLRecordBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURLRecords not implemented")
}
func (UnimplementedURLServiceServer) DeleteURLRecords(context.Context, *DeleteURLRecordsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLRecords not implemented")
}
func (UnimplementedURLServiceServer) GetURLByShort(context.Context, *Short) (*URLRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLByShort not implemented")
}
func (UnimplementedURLServiceServer) GetURLByUserID(context.Context, *ID) (*ByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLByUserID not implemented")
}
func (UnimplementedURLServiceServer) PingContext(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingContext not implemented")
}
func (UnimplementedURLServiceServer) GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedURLServiceServer) mustEmbedUnimplementedURLServiceServer() {}
func (UnimplementedURLServiceServer) testEmbeddedByValue()                    {}

// UnsafeURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLServiceServer will
// result in compilation errors.
type UnsafeURLServiceServer interface {
	mustEmbedUnimplementedURLServiceServer()
}

func RegisterURLServiceServer(s grpc.ServiceRegistrar, srv URLServiceServer) {
	// If the following call pancis, it indicates UnimplementedURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&URLService_ServiceDesc, srv)
}

func _URLService_CreateURLRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateURLRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).CreateURLRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_CreateURLRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).CreateURLRecord(ctx, req.(*CreateURLRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_CreateURLRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateURLRecordBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).CreateURLRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_CreateURLRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).CreateURLRecords(ctx, req.(*CreateURLRecordBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_DeleteURLRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).DeleteURLRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_DeleteURLRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).DeleteURLRecords(ctx, req.(*DeleteURLRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_GetURLByShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Short)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).GetURLByShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_GetURLByShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).GetURLByShort(ctx, req.(*Short))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_GetURLByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).GetURLByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_GetURLByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).GetURLByUserID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_PingContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).PingContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_PingContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).PingContext(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServiceServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// URLService_ServiceDesc is the grpc.ServiceDesc for URLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.URLService",
	HandlerType: (*URLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateURLRecord",
			Handler:    _URLService_CreateURLRecord_Handler,
		},
		{
			MethodName: "CreateURLRecords",
			Handler:    _URLService_CreateURLRecords_Handler,
		},
		{
			MethodName: "DeleteURLRecords",
			Handler:    _URLService_DeleteURLRecords_Handler,
		},
		{
			MethodName: "GetURLByShort",
			Handler:    _URLService_GetURLByShort_Handler,
		},
		{
			MethodName: "GetURLByUserID",
			Handler:    _URLService_GetURLByUserID_Handler,
		},
		{
			MethodName: "PingContext",
			Handler:    _URLService_PingContext_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _URLService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
