// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/service/interface.go -destination=internal/mocks/mock_url_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/atinyakov/go-url-shortener/internal/models"
	storage "github.com/atinyakov/go-url-shortener/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteBatch mocks base method.
func (m *MockStorage) DeleteBatch(arg0 context.Context, arg1 []storage.URLRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockStorageMockRecorder) DeleteBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockStorage)(nil).DeleteBatch), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockStorage) FindByID(arg0 context.Context, arg1 string) (storage.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(storage.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockStorageMockRecorder) FindByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockStorage)(nil).FindByID), arg0, arg1)
}

// FindByShort mocks base method.
func (m *MockStorage) FindByShort(arg0 context.Context, arg1 string) (*storage.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShort", arg0, arg1)
	ret0, _ := ret[0].(*storage.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShort indicates an expected call of FindByShort.
func (mr *MockStorageMockRecorder) FindByShort(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShort", reflect.TypeOf((*MockStorage)(nil).FindByShort), arg0, arg1)
}

// FindByUserID mocks base method.
func (m *MockStorage) FindByUserID(arg0 context.Context, arg1 string) (*[]storage.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1)
	ret0, _ := ret[0].(*[]storage.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockStorageMockRecorder) FindByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockStorage)(nil).FindByUserID), arg0, arg1)
}

// GetStats mocks base method.
func (m *MockStorage) GetStats(arg0 context.Context) (*models.StatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0)
	ret0, _ := ret[0].(*models.StatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStorageMockRecorder) GetStats(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStorage)(nil).GetStats), arg0)
}

// PingContext mocks base method.
func (m *MockStorage) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockStorageMockRecorder) PingContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockStorage)(nil).PingContext), arg0)
}

// Read mocks base method.
func (m *MockStorage) Read(arg0 context.Context) ([]storage.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]storage.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStorageMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorage)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockStorage) Write(arg0 context.Context, arg1 storage.URLRecord) (*storage.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(*storage.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockStorageMockRecorder) Write(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorage)(nil).Write), arg0, arg1)
}

// WriteAll mocks base method.
func (m *MockStorage) WriteAll(arg0 context.Context, arg1 []storage.URLRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAll indicates an expected call of WriteAll.
func (mr *MockStorageMockRecorder) WriteAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAll", reflect.TypeOf((*MockStorage)(nil).WriteAll), arg0, arg1)
}

// MockURLServiceIface is a mock of URLServiceIface interface.
type MockURLServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockURLServiceIfaceMockRecorder
	isgomock struct{}
}

// MockURLServiceIfaceMockRecorder is the mock recorder for MockURLServiceIface.
type MockURLServiceIfaceMockRecorder struct {
	mock *MockURLServiceIface
}

// NewMockURLServiceIface creates a new mock instance.
func NewMockURLServiceIface(ctrl *gomock.Controller) *MockURLServiceIface {
	mock := &MockURLServiceIface{ctrl: ctrl}
	mock.recorder = &MockURLServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLServiceIface) EXPECT() *MockURLServiceIfaceMockRecorder {
	return m.recorder
}

// CreateURLRecord mocks base method.
func (m *MockURLServiceIface) CreateURLRecord(ctx context.Context, long, userID string) (*storage.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLRecord", ctx, long, userID)
	ret0, _ := ret[0].(*storage.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURLRecord indicates an expected call of CreateURLRecord.
func (mr *MockURLServiceIfaceMockRecorder) CreateURLRecord(ctx, long, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLRecord", reflect.TypeOf((*MockURLServiceIface)(nil).CreateURLRecord), ctx, long, userID)
}

// CreateURLRecords mocks base method.
func (m *MockURLServiceIface) CreateURLRecords(ctx context.Context, rs []models.BatchRequest, userID string) (*[]models.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLRecords", ctx, rs, userID)
	ret0, _ := ret[0].(*[]models.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURLRecords indicates an expected call of CreateURLRecords.
func (mr *MockURLServiceIfaceMockRecorder) CreateURLRecords(ctx, rs, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLRecords", reflect.TypeOf((*MockURLServiceIface)(nil).CreateURLRecords), ctx, rs, userID)
}

// DeleteURLRecords mocks base method.
func (m *MockURLServiceIface) DeleteURLRecords(ctx context.Context, rs []storage.URLRecord) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteURLRecords", ctx, rs)
}

// DeleteURLRecords indicates an expected call of DeleteURLRecords.
func (mr *MockURLServiceIfaceMockRecorder) DeleteURLRecords(ctx, rs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLRecords", reflect.TypeOf((*MockURLServiceIface)(nil).DeleteURLRecords), ctx, rs)
}

// GetStats mocks base method.
func (m *MockURLServiceIface) GetStats(ctx context.Context) (*models.StatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(*models.StatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockURLServiceIfaceMockRecorder) GetStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockURLServiceIface)(nil).GetStats), ctx)
}

// GetURLByShort mocks base method.
func (m *MockURLServiceIface) GetURLByShort(ctx context.Context, short string) (*storage.URLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShort", ctx, short)
	ret0, _ := ret[0].(*storage.URLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByShort indicates an expected call of GetURLByShort.
func (mr *MockURLServiceIfaceMockRecorder) GetURLByShort(ctx, short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShort", reflect.TypeOf((*MockURLServiceIface)(nil).GetURLByShort), ctx, short)
}

// GetURLByUserID mocks base method.
func (m *MockURLServiceIface) GetURLByUserID(ctx context.Context, id string) (*[]models.ByIDRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByUserID", ctx, id)
	ret0, _ := ret[0].(*[]models.ByIDRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByUserID indicates an expected call of GetURLByUserID.
func (mr *MockURLServiceIfaceMockRecorder) GetURLByUserID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByUserID", reflect.TypeOf((*MockURLServiceIface)(nil).GetURLByUserID), ctx, id)
}

// PingContext mocks base method.
func (m *MockURLServiceIface) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockURLServiceIfaceMockRecorder) PingContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockURLServiceIface)(nil).PingContext), ctx)
}
