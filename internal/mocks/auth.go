// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/service/auth.go -destination=internal/mocks/auth.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	service "github.com/atinyakov/go-url-shortener/internal/app/service"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthIface is a mock of AuthIface interface.
type MockAuthIface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthIfaceMockRecorder
	isgomock struct{}
}

// MockAuthIfaceMockRecorder is the mock recorder for MockAuthIface.
type MockAuthIfaceMockRecorder struct {
	mock *MockAuthIface
}

// NewMockAuthIface creates a new mock instance.
func NewMockAuthIface(ctrl *gomock.Controller) *MockAuthIface {
	mock := &MockAuthIface{ctrl: ctrl}
	mock.recorder = &MockAuthIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthIface) EXPECT() *MockAuthIfaceMockRecorder {
	return m.recorder
}

// BuildJWTString mocks base method.
func (m *MockAuthIface) BuildJWTString() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildJWTString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildJWTString indicates an expected call of BuildJWTString.
func (mr *MockAuthIfaceMockRecorder) BuildJWTString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJWTString", reflect.TypeOf((*MockAuthIface)(nil).BuildJWTString))
}

// ParseClaims mocks base method.
func (m *MockAuthIface) ParseClaims(c *http.Cookie) (*service.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaims", c)
	ret0, _ := ret[0].(*service.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaims indicates an expected call of ParseClaims.
func (mr *MockAuthIfaceMockRecorder) ParseClaims(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaims", reflect.TypeOf((*MockAuthIface)(nil).ParseClaims), c)
}

// ParseRawJWT mocks base method.
func (m *MockAuthIface) ParseRawJWT(tokenString string) (*service.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRawJWT", tokenString)
	ret0, _ := ret[0].(*service.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRawJWT indicates an expected call of ParseRawJWT.
func (mr *MockAuthIfaceMockRecorder) ParseRawJWT(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRawJWT", reflect.TypeOf((*MockAuthIface)(nil).ParseRawJWT), tokenString)
}
